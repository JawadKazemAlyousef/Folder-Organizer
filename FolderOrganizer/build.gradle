plugins {
  id 'java'
  id 'application'
  id 'eclipse'
  id "org.openjfx.javafxplugin" version "0.1.0"  
  id("org.beryx.jlink") version "3.0.1"
}



repositories {
    mavenCentral()
}


compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaExec){
	 systemProperty "file.encoding", "utf-8"

}

test {
    systemProperty "file.encoding", "utf-8"
    useJUnitPlatform()
}



dependencies{
	implementation group: 'org.openjfx', name: 'javafx-controls', version: '20.0.1'
	implementation group: 'org.openjfx', name: 'javafx-base', version: '21.0.1'
	implementation group: 'org.openjfx', name: 'javafx-graphics', version: '21.0.1'
	implementation group: 'org.openjfx', name: 'javafx-fxml', version: '21.0.1'
	
	
}


javafx {
    version = "21.0.1"
    modules = [ 'javafx.controls', 'javafx.base', 'javafx.graphics', 'javafx.fxml']
}

mainClassName = "folder.organizer.FolderOrganizerDriver"


eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'FolderOrganizer'
    }
}

task customFatJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes(
            'Main-Class': 'folder.organizer.FolderOrganizerDriver'
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    exclude { FileTreeElement el -> el.file.toPath().startsWith("$buildDir/resources/main")}
    
}




